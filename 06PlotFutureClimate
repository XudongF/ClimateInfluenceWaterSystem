# %%
import numpy as np
import matplotlib.pyplot as plt
from utils import read_climate, line_styles

plt.style.use(['science', 'no-latex'])

plt.rcParams.update({
    "figure.figsize": (4, 3)})


def plot_future_climate(city):
    temp = []
    precip = []
    line_style, _ = line_styles()
    for count, ssp in enumerate(['ssp126', 'ssp370', 'ssp585']):
        for model in ['MIROC6', 'CanESM', 'CESM2']:
            future_climate = read_climate(model, ssp, city)
            future_climate['year'] = future_climate.index.year
            grouped = future_climate.groupby('year').mean()
            temp.append(grouped['Temp'].values.tolist())

        Total_temp = np.array(temp)
        temp_upper = np.max(Total_temp, axis=0)
        temp_lower = np.min(Total_temp, axis=0)
        temp_mean = np.mean(Total_temp, axis=0)

        plt.fill_between(np.arange(2020, 2101),
                         temp_lower, temp_upper, alpha=0.2)
        plt.plot(np.arange(2020, 2101), temp_mean, lw=2,
                 label=ssp, linestyle=line_style[count])

    plt.xlabel('Year')
    plt.ylabel("Temperature")
    plt.legend()
    plt.tight_layout()
    plt.savefig(
        f'../results/MonthlyPrediction/Temperature{city}.tiff', dpi=300, bbox_inches='tight')
    plt.show()

    for count, ssp in enumerate(['ssp126', 'ssp370', 'ssp585']):
        for model in ['MIROC6', 'CanESM', 'CESM2']:
            future_climate = read_climate(model, ssp, city)
            future_climate['year'] = future_climate.index.year
            grouped = future_climate.groupby('year').mean()
            precip.append(grouped['Pr'].values.tolist())

        Total_pr = np.array(precip)

        pr_upper = np.max(Total_pr, axis=0)
        pr_lower = np.min(Total_pr, axis=0)
        pr_mean = np.mean(Total_pr, axis=0)

        plt.fill_between(np.arange(2020, 2101), pr_lower, pr_upper, alpha=0.2)
        plt.plot(np.arange(2020, 2101), pr_mean, lw=2,
                 label=ssp, linestyle=line_style[count])

    plt.xlabel('Year')
    plt.ylabel("Precipitation")
    plt.legend()
    plt.tight_layout()
    plt.savefig(
        f'../results/MonthlyPrediction/Precipitation{city}.tiff', dpi=300, bbox_inches='tight')
    plt.show()


if __name__ == '__main__':
    for city in ['Miami', 'Cleveland', 'Phoenix', 'Salt Lake']:
        plot_future_climate(city)
